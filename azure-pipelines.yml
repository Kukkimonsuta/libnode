variables:
  LIBNODE_NODE_VERSION: 'v15.10.0'

jobs:
  - job: build
    strategy:
      matrix:
        linux:
          imageName: 'ubuntu-18.04'
        mac:
          imageName: 'macOS-10.15'
        win_x64:
          imageName: 'windows-2019'
        win_x86:
          LIBNODE_X86: '1'
          imageName: 'windows-2019'
        linux_nointl:
          LIBNODE_CONFIG_FLAGS: '--without-intl'
          LIBNODE_ZIP_SUFFIX: '-nointl'
          imageName: 'ubuntu-18.04'
        mac_nointl:
          LIBNODE_CONFIG_FLAGS: '--without-intl'
          LIBNODE_ZIP_SUFFIX: '-nointl'
          imageName: 'macOS-10.15'
        win_x64_nointl:
          LIBNODE_CONFIG_FLAGS: '--without-intl'
          LIBNODE_ZIP_SUFFIX: '-nointl'
          imageName: 'windows-2019'
        win_x86_nointl:
          LIBNODE_CONFIG_FLAGS: '--without-intl'
          LIBNODE_ZIP_SUFFIX: '-nointl'
          LIBNODE_X86: '1'
          imageName: 'windows-2019'
    pool:
      vmImage: $(imageName)

    steps:
        
    - task: UsePythonVersion@0

    - script: |
        choco install -y nasm
      condition: eq( variables['Agent.OS'], 'Windows_NT' )
      displayName: 'Install nasm on Windows'


    - script: HOMEBREW_NO_AUTO_UPDATE=1 brew install ninja
      condition: eq( variables['Agent.OS'], 'Darwin' )
      displayName: 'Install Ninja on macOS'

    - script: sudo apt-get install -y ninja-build
      condition: eq( variables['Agent.OS'], 'Linux' )
      displayName: 'Install Ninja on Linux'

    - script: |
        choco install -y patch
      condition: eq( variables['Agent.OS'], 'Windows_NT' )
      displayName: 'Install GNU patch on Windows'

    - bash: python -m scripts.download
      displayName: 'Download source code of Node.js'

    - bash: python -m scripts.patch
      displayName: 'Patch source code of Node.js'

    - bash: python -m scripts.build
      displayName: 'Build'

    - bash: python -m scripts.headers
      displayName: 'Copy Headers'

    - bash: python -m scripts.postproc
      displayName: 'Postprocess'

    - bash: python -m scripts.test
      displayName: 'Test'

    - bash: |
        output=$(python -m scripts.archive)
        echo "##vso[task.setvariable variable=zip_file;]$output"
      displayName: 'Archive'
    
    - task: PublishBuildArtifacts@1
      inputs:
        artifactName: $(zip_file)
        pathtoPublish: $(zip_file)
        
  - job: gh_release
    dependsOn: build
    steps:
    - task: DownloadBuildArtifacts@0
      inputs:
        downloadType: 'specific'
        downloadPath: $(Build.ArtifactStagingDirectory)
    - task: GitHubRelease@0
      inputs:
        gitHubConnection: 'GitHub connection 1'
        repositoryName: patr0nus/libnode
        action: 'create'
        target: '$(Build.SourceVersion)'
        tagSource: 'manual'
        tag: 'libnode-$(LIBNODE_NODE_VERSION)'
        assets: '$(Build.ArtifactStagingDirectory)/*/*'
        isDraft: false
        addChangeLog: false
